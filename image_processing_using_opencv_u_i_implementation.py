# -*- coding: utf-8 -*-
"""Image processing using OpenCV  U.I. Implementation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yY5PSYuYn5MKD5a2TjK6eLwqdz0vu8C9
"""

pip install gradio

import gradio as gr
import cv2
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO
from PIL import Image

def process_image(image):
    # Convert PIL Image to OpenCV format
    img = np.array(image)

    if img.shape[-1] == 4:  # Handle RGBA images
        img = cv2.cvtColor(img, cv2.COLOR_RGBA2RGB)

    # Separate RGB channels with colored backgrounds
    red_channel = np.zeros_like(img)
    red_channel[:, :, 0] = img[:, :, 0]  # Keep only red channel

    green_channel = np.zeros_like(img)
    green_channel[:, :, 1] = img[:, :, 1]  # Keep only green channel

    blue_channel = np.zeros_like(img)
    blue_channel[:, :, 2] = img[:, :, 2]  # Keep only blue channel

    # Convert RGB to BGR
    img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

    # Apply blur
    blurred = cv2.GaussianBlur(img, (15, 15), 0)

    # Generate histogram
    histogram = generate_histogram(img)

    return (
        Image.fromarray(red_channel),
        Image.fromarray(green_channel),
        Image.fromarray(blue_channel),
        Image.fromarray(img_bgr),
        Image.fromarray(blurred),
        histogram
    )

def generate_histogram(image):
    # Flatten image array and calculate histogram
    colors = ('r', 'g', 'b')
    plt.figure()
    for i, color in enumerate(colors):
        hist = cv2.calcHist([image], [i], None, [256], [0, 256])
        plt.plot(hist, color=color)
    plt.title('Color Histogram')
    plt.xlabel('Pixel Value')
    plt.ylabel('Frequency')

    # Save histogram to a buffer
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return Image.open(buf)

# Gradio Interface
iface = gr.Interface(
    fn=process_image,
    inputs=gr.Image(type="pil"),
    outputs=[
        gr.Image(type="pil", label="Red Channel"),
        gr.Image(type="pil", label="Green Channel"),
        gr.Image(type="pil", label="Blue Channel"),
        gr.Image(type="pil", label="BGR Image"),
        gr.Image(type="pil", label="Blurred Image"),
        gr.Image(type="pil", label="Histogram")
    ],
    title="Image Processing with Gradio",
    description="Upload an image to extract RGB channels with colored backgrounds, convert RGB to BGR, apply blur, and view the histogram."
)

iface.launch()