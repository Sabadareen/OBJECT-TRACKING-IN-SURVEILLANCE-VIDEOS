# -*- coding: utf-8 -*-
"""Object detection using tiny yolo U.I. Implementation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VN29bkGuSwyHIYXSlHQzLujyslvoiidj
"""

!pip install gradio

!pip install opencv-python
!pip install gradio
!wget https://pjreddie.com/media/files/yolov3.weights
!wget https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov3.cfg
!wget https://raw.githubusercontent.com/pjreddie/darknet/master/data/coco.names


import cv2
import numpy as np
import gradio as gr

# Load YOLOv3 model
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]
colors = np.random.uniform(0, 255, size=(len(classes), 3))

def detect_objects(video_path, confidence_threshold, nms_threshold):
    cap = cv2.VideoCapture(video_path)
    frames = []
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        height, width, channels = frame.shape

        # Detecting objects
        blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        net.setInput(blob)
        outs = net.forward(output_layers)

        # Showing information on the screen
        class_ids = []
        confidences = []
        boxes = []
        for out in outs:
            for detection in out:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > confidence_threshold:
                    # Object detected
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    w = int(detection[2] * width)
                    h = int(detection[3] * height)

                    # Rectangle coordinates
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)

                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)

        indexes = cv2.dnn.NMSBoxes(boxes, confidences, confidence_threshold, nms_threshold)
        for i in range(len(boxes)):
            if i in indexes:
                x, y, w, h = boxes[i]
                label = str(classes[class_ids[i]])
                color = colors[class_ids[i]]
                cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                cv2.putText(frame, label, (x, y + 30), cv2.FONT_HERSHEY_PLAIN, 1, color, 2)

        frames.append(frame)
    cap.release()

    # Create output video from annotated frames
    height, width, layers = frames[0].shape
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Use appropriate codec
    out = cv2.VideoWriter('output.mp4', fourcc, 20.0, (width, height))
    for frame in frames:
        out.write(frame)
    out.release()

    return 'output.mp4'  # Return path to the output video

# Create the Gradio interface
iface = gr.Interface(
    fn=detect_objects,
    inputs=[
        gr.Video(format="mp4", label="Upload Video"),
        gr.Slider(0.1, 1.0, value=0.5, label="Confidence Threshold"),  # Confidence slider
        gr.Slider(0.1, 1.0, value=0.4, label="NMS Threshold")      # NMS threshold slider
    ],
    outputs=gr.Video(label="Processed Video"),
    title="Object Detection with YOLOv3",
    description="Upload a video and adjust the parameters to detect objects."
)

# Launch the interface
iface.launch(debug=True)